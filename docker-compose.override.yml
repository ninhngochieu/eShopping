version: '3.4'

services:
  catalogdb:
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    # Todo: 2.27.4 Mount volume from service volume into data folder on image. 
    # Mount volume từ bên ngoài (mongo_data, có thể mount bằng folder vật lý) tới thư mục data quan trọng của image
    volumes:
      - mongo_data:/data/db
      
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
  
  discountdb:
    container_name: discountdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Password@1
      - POSTGRES_DB=DiscountDb
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      
  orderdb:
    container_name: orderdb
    environment:
      SA_PASSWORD: "Rahul1234567"
      ACCEPT_EULA: "Y"
    restart: always
    ports:
      - "1433:1433"
      
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
        
  # Todo: 4.16.1 Setup management UI for PostgreSQL 
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@eShopping.net
      - PGADMIN_DEFAULT_PASSWORD=Password@1
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
      
  # Todo: 3.15.2 Config portainer
  # Quản các các container bằng giao diện trực quan thay cho Docker Desktop
  # Mục đích: Trong microservices có rất nhiều Services, cần có tool quản lý
  # docker.sock là một UNIX socket mà Docker daemon đang lắng nghe. Đây là điểm vào chính cho Docker API1. Docker cli client sử dụng socket này để thực hiện các lệnh docker theo mặc định1.
  #
  #Có thể có nhiều lý do khác nhau khiến bạn cần phải mount Docker socket bên trong một container. 
  #Ví dụ như khởi chạy các container mới từ bên trong một container khác. 
  #Hoặc cho mục đích khám phá dịch vụ tự động và Logging1.
  #
  #Tuy nhiên, việc này tăng mặt bằng tấn công nên bạn nên cẩn thận nếu bạn mount docker socket bên trong một container. 
  #Đảm bảo rằng chỉ có các mã đáng tin cậy đang chạy bên trong container đó. 
  #Nếu không, bạn có thể đơn giản là đánh cắp máy chủ của bạn đang chạy docker daemon, vì Docker theo mặc định khởi chạy tất cả các container dưới dạng root1.
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9090:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
        
  catalog.api:
    container_name: catalog.api
    # Todo: 2.27.5 Override Appsettings.json properties
    # Thay thế : bằng __ vì YAML không hiểu kí tự này. Sử dụng để bóc data setting từ Json
    # Thay thế đường link localhost bằng service name đã depends on
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
#      - ASPNETCORE_URLS=http://*:9000
      - "DatabaseSettings__ConnectionString=mongodb://catalogdb:27017"
      - "DatabaseSettings__DatabaseName=CatalogDb"
      - "DatabaseSettings__CollectionName=Products"
      - "DatabaseSettings__BrandsCollection=Brands"
      - "DatabaseSettings__TypesCollection=Types"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    # Link tới service khác để call chức năng
    depends_on:
      - catalogdb
    # Mapping port 80 của image thành port của localhost:9000
    ports:
      - "9000:80"
    
  
  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
#      - ASPNETCORE_URLS=http://*:9001
      - "CacheSettings__ConnectionString=basketdb:6379"
#Todo: 5.7.1 Setup Url for GRPC
      - "GrpcSettings__DiscountUrl=http://discount.api"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "9001:80"
    
        
  discount.api:
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings__ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=Password@1;"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
#      - ASPNETCORE_URLS=http://*:9002          
    depends_on:
      - discountdb
    ports:
      - "9002:80"
    
        
  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
#      - ASPNETCORE_URLS=http://*:9003
      - "ConnectionStrings__OrderingConnectionString=Server=orderdb;Database=OrderDb;User Id=sa;Password=Rahul1234567"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
      - "ElasticConfiguration__Uri=http://elasticsearch:9200"
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "9003:80"
    
        
  ocelotapigw:
    container_name: ocelotapigw
    environment:
      - ASPNETCORE_ENVIRONMENT=Development      
    depends_on:
#      - identityserver
      - catalog.api
      - basket.api
      - discount.api
      - ordering.api
    ports:
      - "9010:80" 
        
  elasticsearch:
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"      
  
#  identityserver:
#      container_name: identityserver
#      environment:
#        - ASPNETCORE_ENVIRONMENT=Development
#        - ASPNETCORE_URLS=http://*:9011      
#      ports:
#        - "9011:9011"
    
